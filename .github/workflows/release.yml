name: Release

on:
  release:
    types: [published]

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

permissions:
  contents: read
  id-token: write

jobs:
  publish-release:
    name: Publish Stable Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.release.tag_name }}
          
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          GOOGLE_CUSTOM_SEARCH_API_KEY: ${{ secrets.GOOGLE_CUSTOM_SEARCH_API_KEY }}
          GOOGLE_CUSTOM_SEARCH_ID: ${{ secrets.GOOGLE_CUSTOM_SEARCH_ID }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          NODE_ENV: test
          
      - name: Build package
        run: npm run build
        
      - name: Validate release version
        id: version
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          RELEASE_VERSION=${GITHUB_REF#refs/tags/v}
          
          if [[ "$PACKAGE_VERSION" != "$RELEASE_VERSION" ]]; then
            echo "❌ Version mismatch: package.json ($PACKAGE_VERSION) != release tag ($RELEASE_VERSION)"
            exit 1
          fi
          
          echo "version=${PACKAGE_VERSION}" >> $GITHUB_OUTPUT
          echo "✅ Version validation passed: $PACKAGE_VERSION"
          
      - name: Generate release notes
        id: release_notes
        run: |
          # Extract release notes from GitHub release
          RELEASE_NOTES=$(echo '${{ github.event.release.body }}' | head -20)
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Publish to npm
        run: npm publish --tag latest --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create SLSA attestation
        uses: actions/attest-build-provenance@v1
        with:
          subject-path: 'dist/**/*'
          
      - name: Update GitHub release
        uses: actions/github-script@v7
        with:
          script: |
            const { owner, repo } = context.repo;
            const release_id = context.payload.release.id;
            
            await github.rest.repos.updateRelease({
              owner,
              repo,
              release_id,
              body: `${{ steps.release_notes.outputs.notes }}
              
              ## 📦 Installation
              \`\`\`bash
              npm install google-researcher-mcp@${{ steps.version.outputs.version }}
              \`\`\`
              
              ## 🔗 Links
              - [npm package](https://www.npmjs.com/package/google-researcher-mcp/v/${{ steps.version.outputs.version }})
              - [Documentation](https://github.com/${{ github.repository }}#readme)
              - [Changelog](https://github.com/${{ github.repository }}/blob/main/docs/CHANGELOG.md)
              `
            });
            
      - name: Create deployment summary
        run: |
          echo "## 🎉 Stable Release Published" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Install**: \`npm install google-researcher-mcp@latest\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Release**: [${{ github.event.release.name }}](${{ github.event.release.html_url }})" >> $GITHUB_STEP_SUMMARY