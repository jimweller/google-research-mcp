name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  NODE_VERSION: '18'
  REGISTRY_URL: 'https://registry.npmjs.org'

permissions:
  contents: read
  id-token: write

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Install dependencies
        run: npm ci
        
      - name: Type check
        run: npx tsc --noEmit
        
      - name: Run unit tests
        run: npm test
        
      - name: Run E2E tests
        run: npm run test:e2e
        env:
          GOOGLE_CUSTOM_SEARCH_API_KEY: ${{ secrets.GOOGLE_CUSTOM_SEARCH_API_KEY }}
          GOOGLE_CUSTOM_SEARCH_ID: ${{ secrets.GOOGLE_CUSTOM_SEARCH_ID }}
          GOOGLE_GEMINI_API_KEY: ${{ secrets.GOOGLE_GEMINI_API_KEY }}
          
      - name: Build package
        run: npm run build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          retention-days: 30

  publish-dev:
    name: Publish Development Build
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          registry-url: ${{ env.REGISTRY_URL }}
          
      - name: Install dependencies
        run: npm ci
          
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          name: dist-${{ github.sha }}
          path: dist/
          
      - name: Generate dev version
        id: version
        run: |
          TIMESTAMP=$(date +%Y%m%d%H%M%S)
          BASE_VERSION=$(node -p "require('./package.json').version")
          DEV_VERSION="${BASE_VERSION}-dev.${TIMESTAMP}"
          echo "version=${DEV_VERSION}" >> $GITHUB_OUTPUT
          npm version $DEV_VERSION --no-git-tag-version
          
      - name: Publish to npm
        run: npm publish --tag dev --provenance
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          
      - name: Create deployment summary
        run: |
          echo "## ğŸš€ Development Build Published" >> $GITHUB_STEP_SUMMARY
          echo "- **Version**: \`${{ steps.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Install**: \`npm install google-researcher-mcp@dev\`" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          
      - name: Cleanup processes
        if: always()
        run: |
          # Kill any remaining server processes
          pkill -f "dist/server.js" || true
          pkill -f "node.*server" || true
          
          # Clean up test ports
          lsof -ti tcp:3000 | xargs kill -9 2>/dev/null || true
          
          # Clean up test storage
          rm -rf storage/test/ || true